- slug: abstract_base_class
  en:
    term: "abstract base class"
    def: >
      A [base class](#base_class) whose [methods](#method) are not fully
      implemented.  An abstract base class defines behaviors, or requirements on
      behaviors, that [derived classes](#derived_class) must satisfy.

- slug: base_class
  ref:
  - child_class
  - derived_class
  - parent_class
  en:
    term: "base class"
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which
      other classes are derived.

- slug: chain_of_responsibility_pattern
  en:
    term: "Chain of Responsibility pattern"
    def: >
      A [design pattern](#design_pattern) in which each [object](#object)
      either handles a request or passes it on to another object.

- slug: circular_dependency
  en:
    term: "circular dependency"
    def: >
      A situation in which X depends on Y and Y depends on X, either
      directly or indirectly. If there is a circular dependency, then
      the [dependency graph](#dependency_graph) is not [acyclic](#dag).

- slug: column_wise
  en:
    term: "column-wise storage"
    def: >
      Storing each column of a two-dimensional array as one block of memory
      so that elements in the same row are far apart.

- slug: combinatorial_explosion
  en:
    term: "combinatorial explosion"
    def: >
      The exponential growth in the size of a problem or the time required to
      solve it that arises when all possible combinations of a set of items must
      be searched.

- slug: coupling
  en:
    term: "coupling"
    def: >
      The degree of interaction between two [classes](#class),
      [modules](#module), or other software components. If a system's components
      are [loosely coupled](#loosely_coupled), changes to one are unlikely to
      affect others.  If they are [tightly coupled](#tightly_coupled), then any
      change requires other changes elsewhere, which complicates maintenance and
      evolution.

- slug: crud
  en:
    term: "Create-Read-Update-Delete"
    acronym: "CRUD"
    def: >
      The four basic operations of applications whose primary role is to be an
      interface to data in a database.

- slug: dag
  en:
    term: "directed acyclic graph"
    acronym: "DAG"
    def: >
      A [directed graph](#directed_graph) which does not contain any loops
      (i.e., it is not possible to reach a [node](#node) from itself by
      following edges).

- slug: dependency_graph
  en:
    term: "dependency graph"
    def: >
      A [directed graph](#directed_graph) showing how things depend on
      one another, such as the files to be updated by a
      [build manager](#build_manager). If the dependency graph is not
      [acyclic](#dag), the dependencies cannot be resolved.

- slug: depth_first_search
  en:
    term: "depth-first search"
    def: >
      A search algorithm that explores one possibility all the way to
      its conclusion before moving on to the next.

- slug: derived_class
  ref:
  - child_class
  en:
    term: "derived class"
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).

- slug: directed_graph
  en:
    term: "directed graph"
    def: >
      A [graph](#graph) whose [edges](#edge) have directions.

- slug: directory
  en:
    term: "directory"
    def: >
      A structure in a [filesystem](#filesystem) that contains references
      to other structures, such as files and other directories.

- slug: driver
  en:
    term: "driver"
    def: >
      A program that runs other programs, or a function that "drives" all
      of the other functions in a program.

- slug: easy_mode
  en:
    term: "easy mode"
    def: >
      A term borrowed from gaming meaning to do something with obstacles or
      difficulties simplified or removed, often for practice purposes.

- slug: entry_point
  en:
    term: "entry point"
    def: >
      Where a program begins executing.

- slug: greedy_algorithm
  en:
    term: "greedy algorithm"
    def: >
      An algorithm that consumes as much input as possible, as early as
      possible.

- slug: heuristic
  en:
    term: "heuristic"
    def: >
      A rule or guideline that isn't guaranteed to produce the desired result,
      but usually does.

- slug: iife
  en:
    term: "immediately-invoked function expression"
    acronym: "IIFE"
    def: >
      A function that is invoked once at the point where it is defined.  IIFEs
      are typically used to create a [scope](#scope) to hide some function or
      variable definitions.

- slug: key_binding
  en:
    term: "key binding"
    def: >
      A specification that a particular key on a computer keyboard is to invoke
      a particular function or operation.

- slug: link
  en:
    term: "link (a program)"
    def: >
      To combine separately [compiled](#compile) modules into a single
      runnable program.

- slug: loosely_coupled
  ref:
  - tightly_coupled
  en:
    term: "loosely coupled"
    def: >
      Components in a software system are said to be loosely coupled if they are
      relatively independent of one another, i.e., if any one of them can be
      changed or replaced without others having to be altered as well.

- slug: manifest
  en:
    term: "manifest"
    def: >
      A list that specifies the precise versions of a complete set of libraries
      or other software components.

- slug: module_bundler
  en:
    term: "module bundler"
    def: >
      A program that finds all the dependencies of a set of source files
      and combines them into a single loadable file.

- slug: nested_function
  en:
    term: "nested function"
    def: >
      A function that is defined inside another function.

- slug: plugin_architecture
  en:
    term: "plugin architecture"
    def: >
      A style of application design in which the main program loads and runs
      small independent modules that do the bulk of the work.

- slug: precedence
  en:
    term: "precedence"
    def: >
      The priority of an operation. For example, multiplication has a higher
      precedence than addition, so `a+b*c` is read as "the sum of `a` with the
      product of `b` and `c`".

- slug: promisification
  en:
    term: "promisification"
    def: >
      In JavaScript, the act of wrapping a callback function in a `Promise` for
      uniform asynchronous execution.

- slug: prune
  en:
    term: "prune"
    def: >
      To remove branches and nodes from a tree, or to rule out partially-complete
      solutions when searching for an overall solution in order to reduce work.

- slug: query_selector
  en:
    term: "query selector"
    def: >
      A pattern that specifies a set of [DOM](#dom) nodes.  Query selectors are
      used in [CSS](#css) to specify the elements that rules apply to, or by
      JavaScript programs to manipulate web pages.

- slug: row_wise
  en:
    term: "row-wise storage"
    def: >
      Storing each row of a two-dimensional array as one block of memory
      so that elements in the same column are far apart.

- slug: sha_1
  en:
    term: "SHA-1"
    def: >
      A [cryptographic hash function](#cryptographic_hash_function) that
      produces a 160-bit output for arbitrary data.  SHA-1 is no longer
      considered strong enough for cryptographic purposes, but is still
      frequently used to calculate keys for [hash tables](#hash_table).

- slug: tagged_data
  en:
    term: "tagged data"
    def: >
      A technique for storing data in a two-part structure, where one part
      identifies the type and the other part stores the bits making up the
      value.

- slug: test_harness
  en:
    term: "test harness"
    def: >
      A program written to test some other program or set of functions,
      typically to measure their performance.

- slug: tightly_coupled
  ref:
  - loosely_coupled
  en:
    term: "tightly coupled"
    def: >
      Components in a software system are said to be tightly coupled if they
      depend on each other's internals, so that if one is altered then others
      have to be altered as well.

- slug: token
  en:
    term: "token"
    def: >
      An indivisible unit of text for a parser, such as a variable
      name or a number. Exactly what constitutes a token depends on
      the language.

- slug: topological_order
  en:
    term: "topological order"
    def: >
      Any ordering of the [nodes](#node) in a [graph](#graph) that respects the
      direction of its [edges](#edge), i.e., if there is an edge from node A to
      node B, A comes before B in the ordering. There may be many topological
      orderings of a particular graph.

- slug: transitive_closure
  en:
    term: "transitive closure"
    def: >
      The set of all [nodes](#node) in a [graph](#graph) that are reachable from
      a starting node, either directly or indirectly.

- slug: utc
  en:
    term: "Coordinated Universal Time"
    acronym: "UTC"
    def: >
      The standard time against which all others are defined. UTC is the time
      at longitude 0Â°, and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.
