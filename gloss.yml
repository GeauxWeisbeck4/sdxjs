- slug: abstract_base_class
  en:
    term: "abstract base class"
    def: >
      A [base class](#base_class) whose [methods](#method) are not fully
      implemented.  An abstract base class defines behaviors, or requirements on
      behaviors, that [derived classes](#derived_class) must satisfy.

- slug: abi
  en:
    term: "Application Binary Interface"
    acronym: "ABI"
    def: >
      The low-level layout that a piece of software must have to work on a
      particular kind of machine.

- slug: assembler
  ref:
    - disassembler
  en:
    term: "assembler"
    def: >
      A [compiler](#compiler) that translates software written in
      [assembly code](#assembly_code) into machine instructions.

- slug: assembly_code
  en:
    term: "assembly code"
    def: >
      A low-level programming language whose statements correspond closely to
      the actual [instruction set](#instruction_set) of a particular kind of
      processor.

- slug: bare_object
  en:
    term: "bare object"
    def: >
      An object that isn't an instance of any particular class.

- slug: base_class
  ref:
    - child_class
    - derived_class
    - parent_class
  en:
    term: "base class"
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which
      other classes are derived.

- slug: breakpoint
  ref:
    - watchpoint
  en:
    term: "breakpoint"
    def: >
      An instruction to a debugger telling it to suspend execution whenever
      a specific point in the program (such as a particular line) is reached.

- slug: chain_of_responsibility_pattern
  en:
    term: "Chain of Responsibility pattern"
    def: >
      A [design pattern](#design_pattern) in which each [object](#object)
      either handles a request or passes it on to another object.

- slug: circular_dependency
  en:
    term: "circular dependency"
    def: >
      A situation in which X depends on Y and Y depends on X, either
      directly or indirectly. If there is a circular dependency, then
      the [dependency graph](#dependency_graph) is not [acyclic](#dag).

- slug: collision
  en:
    term: "collision"
    def: >
      A situation in which a program tries to store two items in the same
      location in memory. For example, a collision occurs when a [hash
      function](#hash_function) generates the same [hash code](#hash_code) for
      two different items.

- slug: column_major
  ref:
    - row_major
  en:
    term: "column-major storage"
    def: >
      Storing each column of a two-dimensional array as one block of memory
      so that elements in the same row are far apart.

- slug: combinatorial_explosion
  en:
    term: "combinatorial explosion"
    def: >
      The exponential growth in the size of a problem or the time required to
      solve it that arises when all possible combinations of a set of items must
      be searched.

- slug: confirmation_bias
  en:
    term: "confirmation bias"
    def: >
      The tendency for someone to look for evidence that they are right rather
      than searching for reasons why they might be wrong.

- slug: corner_case
  en:
    term: "corner case"
    def: >
      Another name for an [edge case](#edge_case).

- slug: coupling
  en:
    term: "coupling"
    def: >
      The degree of interaction between two [classes](#class),
      [modules](#module), or other software components. If a system's components
      are [loosely coupled](#loosely_coupled), changes to one are unlikely to
      affect others.  If they are [tightly coupled](#tightly_coupled), then any
      change requires other changes elsewhere, which complicates maintenance and
      evolution.

- slug: crud
  en:
    term: "Create-Read-Update-Delete"
    acronym: "CRUD"
    def: >
      The four basic operations of applications whose primary role is to be an
      interface to data in a database.

- slug: cycle
  en:
    term: "cycle (in a graph)"
    def: >
      A set of links in a graph that leads from a node back to itself.

- slug: dag
  en:
    term: "directed acyclic graph"
    acronym: "DAG"
    def: >
      A [directed graph](#directed_graph) which does not contain any loops
      (i.e., it is not possible to reach a [node](#node) from itself by
      following edges).

- slug: data_migration
  en:
    term: "data migration"
    def: >
      Moving data from one location or format to another. The term refers to
      translating data from an old format to a newer one.

- slug: dependency_graph
  en:
    term: "dependency graph"
    def: >
      A [directed graph](#directed_graph) showing how things depend on
      one another, such as the files to be updated by a
      [build manager](#build_manager). If the dependency graph is not
      [acyclic](#dag), the dependencies cannot be resolved.

- slug: deprecation
  en:
    term: "deprecation"
    def: >
      To indicate that while a function, method, or class exists, its
      use is no longer recommended (for example, because it is going to
      be phased out in a future release).

- slug: depth_first_search
  en:
    term: "depth-first search"
    def: >
      A search algorithm that explores one possibility all the way to
      its conclusion before moving on to the next.

- slug: derived_class
  ref:
    - child_class
  en:
    term: "derived class"
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).

- slug: directed_graph
  en:
    term: "directed graph"
    def: >
      A [graph](#graph) whose [edges](#edge) have directions.

- slug: directory
  override: true
  en:
    term: "directory"
    def: >
      A structure in a [filesystem](#filesystem) that contains references
      to other structures, such as files and other directories.

- slug: disassembler
  ref:
    - assembler
  en:
    term: "disassembler"
    def: >
      A program that translates machine instructions into
      [assembly code](#assembly_code) or some other higher-level language.

- slug: driver
  en:
    term: "driver"
    def: >
      A program that runs other programs, or a function that "drives" all
      of the other functions in a program.

- slug: eager_matching
  ref:
    - lazy_matching
  en:
    term: "eager matching"
    def: >
      Matching as much as possible, as early as possible.

- slug: easy_mode
  en:
    term: "easy mode"
    def: >
      A term borrowed from gaming meaning to do something with obstacles or
      difficulties simplified or removed, often for practice purposes.

- slug: edge_case
  en:
    term: "edge case"
    def: >
      A problem that only comes up under unusual circumstances or when a
      system is pushed to its limits;
      also sometimes called a [corner case](#corner_case).
      Programs intended for widespread use have to handle edge cases,
      but doing so can make them much more complicated.

- slug: encapsulate
  en:
    term: "encapsulate"
    def: >
      To store data inside some kind of structure so that it is only
      accessible through that structure.

- slug: entry_point
  en:
    term: "entry point"
    def: >
      Where a program begins executing.

- slug: event_loop
  en:
    term: "event loop"
    def: >
      A mechanism for managing concurrent activities in a program. Tasks are
      represented as items in a queue; the event loop repeatedly takes an item
      from the front of the queue and runs it, adding any other tasks it
      generates to the back of the queue to run later.

- slug: fixed_width_string
  en:
    term: "fixed-width (of strings)"
    def: >
      A set of character strings that have the same length. Databases often used
      fixed-width strings to make storage and access more efficient; short
      strings are [padded](#pad_string) up to the required length and long
      strings are truncated.

- slug: future
  en:
    term: "future"
    def: >
      An older (and more general) name for a [promise](#promise).

- slug: greedy_algorithm
  en:
    term: "greedy algorithm"
    def: >
      An algorithm that consumes as much input as possible, as early as
      possible.

- slug: handler
  en:
    term: "handler"
    def: >
      A [callback function](#callback) responsible for handling some particular
      event, such as the user clicking on a button or new data being receiving
      from a file.

- slug: hash_code
  en:
    term: "hash code"
    def: >
      A value generated by a [hash function](#hash_function). Good hash codes
      have the same properties as random numbers in order to reduce the
      frequency of [collisions](#collision).

- slug: header_file
  en:
    term: "header file"
    def: >
      In C and C++, a file that defines constants and function
      [signatures](#signature) but does not contain runnable code. Header
      files tell the including file what is defined in other files so that
      the compiler can generate correct code.

- slug: heuristic
  en:
    term: "heuristic"
    def: >
      A rule or guideline that isn't guaranteed to produce the desired result,
      but usually does.

- slug: idiomatic
  en:
    term: "idiomatic"
    def: >
      To use a language in the same way as a fluent or native speaker. Programs
      are called idiomatic if they use the language the way that proficient
      programmers use it.

- slug: iife
  en:
    term: "immediately-invoked function expression"
    acronym: "IIFE"
    def: >
      A function that is invoked once at the point where it is defined.  IIFEs
      are typically used to create a [scope](#scope) to hide some function or
      variable definitions.

- slug: immutable
  ref:
    - mutable
  en:
    term: "immutable"
    def: >
      Data that cannot be changed after being created. Immutable data is easier
      to think about, particularly if data structures are shared between several
      tasks, but may result in higher memory requirements.

- slug: index_database
  en:
    term: "index (in a database)"
    def: >
      An auxiliary data structure in a database used to speed up search for
      some entries. An index increases memory and disk requirements but
      reduces search time.

- slug: instruction_pointer
  en:
    term: "instruction pointer"
    def: >
      A special [register](#register) in a processor that stores the address
      of the next instruction to execute.

- slug: instruction_set
  en:
    term: "instruction set"
    def: >
      The basic operations that a particular processor can execute directly.

- slug: introspection
  en:
    term: "introspection"
    def: >
      Having a program examine itself as it is running; common examples are to
      determine the specific class of a generic object or to get the fields of
      an object when they are not known in advance.

- slug: key_binding
  en:
    term: "key binding"
    def: >
      A specification that a particular key on a computer keyboard is to invoke
      a particular function or operation.

- slug: label_address
  en:
    term: "label (address in memory)"
    def: >
      A human-readable name given to a particular location in memory when
      writing programs in [assembly code](#assembly_code).

- slug: layout_engine
  en:
    term: "layout engine"
    def: >
      A piece of software that decides where to place text, images, and other
      elements on a page.

- slug: lazy_matching
  ref:
    - eager_matching
  en:
    term: "lazy matching"
    def: >
      Matching as little as possible while still finding a valid match.

- slug: link
  en:
    term: "link (a program)"
    def: >
      To combine separately [compiled](#compile) modules into a single
      runnable program.

- slug: literal
  en:
    term: "literal"
    def: >
      A representation of a fixed value in a program, such as the digits
      `123` for the number 123 or the characters `"abc"` for the string
      containing those three letters.

- slug: loader
  en:
    term: "loader"
    def: >
      A function whose job is to read files containing runnable code into
      memory and make that code available to the calling program.

- slug: loosely_coupled
  ref:
    - tightly_coupled
  en:
    term: "loosely coupled"
    def: >
      Components in a software system are said to be loosely coupled if they are
      relatively independent of one another, i.e., if any one of them can be
      changed or replaced without others having to be altered as well.

- slug: lru_cache
  en:
    term: "Least Recently Used cache"
    acronym: "LRU cache"
    def: >
      A [cache](#cache) that discards items that have not been used recently in
      order to limit memory requirements.

- slug: manifest
  en:
    term: "manifest"
    def: >
      A list that specifies the precise versions of a complete set of libraries
      or other software components.

- slug: mixin-class
  en:
    term: "mixin class"
    def: >
      A class that provides methods for other classes to use without being in
      the inheritance hierarchy.

- slug: module_bundler
  en:
    term: "module bundler"
    def: >
      A program that finds all the dependencies of a set of source files
      and combines them into a single loadable file.

- slug: mutable
  ref:
    - immutable
  en:
    term: "mutable"
    def: >
      Data that can be changed after being created. Mutable data is harder
      to think about, particularly if it is shared between different tasks,
      but may reduce memory requirements.

- slug: nested_function
  en:
    term: "nested function"
    def: >
      A function that is defined inside another function.

- slug: op_code
  en:
    term: "op code"
    def: >
      The numerical code for a particular instruction that a processor
      can execute.

- slug: pad_string
  en:
    term: "pad (a string)"
    def: >
      To add extra characters to a string to make it a required length.

- slug: pipe
  ref:
    - pipe_shell
  en:
    term: "pipe"
    def: >
      To use the output of one computation as the input for the next, or the
      connection between the two computations responsible for the data transfer.
      Pipes were popularized by the [Unix shell](#shell), and are now used in
      many different programming languages and systems.

- slug: plugin_architecture
  en:
    term: "plugin architecture"
    def: >
      A style of application design in which the main program loads and runs
      small independent modules that do the bulk of the work.

- slug: precedence
  en:
    term: "precedence"
    def: >
      The priority of an operation. For example, multiplication has a higher
      precedence than addition, so `a+b*c` is read as "the sum of `a` with the
      product of `b` and `c`".

- slug: promise
  ref:
    - future
    - promisification
  en:
    term: "promise"
    def: >
      A way to represent the result of a delayed or
      [asynchronous](#asynchronous) computation. A promise is a placeholder for
      a value that will eventually be computed; any attempt to read the value
      before it is available blocks, while any such attempt after the
      computation finishes acts like a normal read.

- slug: promisification
  en:
    term: "promisification"
    def: >
      In JavaScript, the act of wrapping a callback function in a [promise](#promise)
      for uniform asynchronous execution.

- slug: prune
  en:
    term: "prune"
    def: >
      To remove branches and nodes from a tree, or to rule out
      partially-complete solutions when searching for an overall solution in
      order to reduce work.

- slug: query_selector
  en:
    term: "query selector"
    def: >
      A pattern that specifies a set of [DOM](#dom) nodes.  Query selectors are
      used in [CSS](#css) to specify the elements that rules apply to, or by
      JavaScript programs to manipulate web pages.

- slug: race_condition
  en:
    term: "race condition"
    def: >
      A situation in which a result depends on the order in which two or more
      concurrent operations are carried out.

- slug: register
  en:
    term: "register"
    def: >
      A small piece of memory (typically one [word](#word_memory) long) built
      into a processor that operations can refer to directly.

- slug: row_major
  ref:
    - column_major
  en:
    term: "row-major storage"
    def: >
      Storing each row of a two-dimensional array as one block of memory
      so that elements in the same column are far apart.

- slug: runnable_documentation
  en:
    term: "runnable documentation"
    def: >
      Statements about code that can be executed to check their correctness,
      such as [assertions](#assertion) or [type declarations](#type_declaration).

- slug: sat_solver
  en:
    term: "SAT solver"
    def: >
      A library or application that determines whether there is an assignment of
      true and false to a set of [Boolean](#boolean) variables that makes an
      expression true (i.e., that satisfies the expression).

- slug: scoring_function
  en:
    term: "scoring function"
    def: >
      A function that measures or estimates how good a solution to a problem is.

- slug: screen_buffer
  ref:
    - text_buffer
  en:
    term: "screen buffer"
    def: >
      A low-level abstraction of a rectangular area of a user's screen used by
      text editors and other graphical interfaces.

- slug: sha_1
  en:
    term: "SHA-1"
    def: >
      A [cryptographic hash function](#cryptographic_hash_function) that
      produces a 160-bit output for arbitrary data.  SHA-1 is no longer
      considered strong enough for cryptographic purposes, but is still
      frequently used to calculate keys for [hash tables](#hash_table).

- slug: signature
  en:
    term: "signature"
    def: >
      The set of parameters (with types or meaning) that characterize the
      calling interface of a function or set of functions. Two functions
      with the same signature can be called interchangeably.

- slug: source_map
  en:
    term: "source map"
    def: >
      A table used to translate a piece of code back to the lines in the
      original source.

- slug: sparse_matrix
  en:
    term: "sparse matrix"
    def: >
      A matrix in which most of the values are zero (or some other value).
      Rather than storing many copies of the same values, programs will
      often use a special data structure that only stores the "interesting"
      values.

- slug: tagged_data
  en:
    term: "tagged data"
    def: >
      A technique for storing data in a two-part structure, where one part
      identifies the type and the other part stores the bits making up the
      value.

- slug: test_harness
  en:
    term: "test harness"
    def: >
      A program written to test some other program or set of functions,
      typically to measure their performance.

- slug: text_buffer
  en:
    term: "text buffer"
    def: >
      An abstraction of an area of a user's screen used by text editors and
      other graphical interfaces. A text buffer provides a higher-level
      interface than a [screen buffer](#screen_buffer).

- slug: tightly_coupled
  ref:
    - loosely_coupled
  en:
    term: "tightly coupled"
    def: >
      Components in a software system are said to be tightly coupled if they
      depend on each other's internals, so that if one is altered then others
      have to be altered as well.

- slug: toctou
  en:
    term: "Time of check/time of use"
    acronym: "ToCToU"
    def: >
      A [race condition](#race_condition) in which a process checks the state
      of something and then operates on it, but some other process might alter
      that state between the check and the operation.

- slug: token
  en:
    term: "token"
    def: >
      An indivisible unit of text for a parser, such as a variable
      name or a number. Exactly what constitutes a token depends on
      the language.

- slug: topological_order
  en:
    term: "topological order"
    def: >
      Any ordering of the [nodes](#node) in a [graph](#graph) that respects the
      direction of its [edges](#edge), i.e., if there is an edge from node A to
      node B, A comes before B in the ordering. There may be many topological
      orderings of a particular graph.

- slug: transitive_closure
  en:
    term: "transitive closure"
    def: >
      The set of all [nodes](#node) in a [graph](#graph) that are reachable from
      a starting node, either directly or indirectly.

- slug: type_declaration
  en:
    term: "type declaration"
    def: >
      A statement in a program that a variable or value has a particular data type.
      Languages like Java require type declarations for all variables;
      they are optional in TypeScript and Python,
      and not allowed in pure JavaScript.

- slug: utc
  en:
    term: "Coordinated Universal Time"
    acronym: "UTC"
    def: >
      The standard time against which all others are defined. UTC is the time
      at longitude 0°, and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.

- slug: watchpoint
  ref:
    - breakpoint
  en:
    term: "watchpoint"
    def: >
      An instruction for a debugger telling it to suspect execution whenever the
      value of a variable (or more generally an expression) changes.

- slug: well_formed
  en:
    term: "well formed"
    def: >
      A piece of text that obeys the rules of a formal grammar is said to be
      well formed.

- slug: word_memory
  en:
    term: "word (of memory)"
    def: >
      The unit of memory that a particular processor most naturally works with.
      While a byte is a fixed size (8 bits), a word may be 16, 32, or 64 bits
      long depending on the processor.
