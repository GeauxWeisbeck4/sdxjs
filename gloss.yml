- slug: abstract_syntax_tree
  en:
    term: "abstract syntax tree"
    acronym: AST
    def: >
      A deeply nested data structure, or [tree](#tree),
      that represents the structure of a program.
      For example, the AST might have a [node](#node) representing a [`while` loop](#while_loop)
      with one [child](#child_tree) representing the loop condition
      and another representing the [loop body](#loop_body).

- slug: dag
  en:
    term: "directed acyclic graph"
    acronym: "DAG"
    def: >
      A [directed graph](#directed_graph) which does not contain any loops
      (i.e., it is not possible to reach a [node](#node) from itself by
      following edges).

- slug: directed_graph
  en:
    term: "directed graph"
    def: >
      A [graph](#graph) whose [edges](#edge) have directions.

- slug: promisification
  en:
    term: "promisification"
    def: >
      FIXME

- slug: topological_order
  en:
    term: "topological order"
    def: >
      Any ordering of the [nodes](#node) in a [graph](#graph)
      that respects the direction of its [edges](#edge), i.e.,
      if there is an edge from node A to node B, A comes before
      B in the ordering. There may be many topological orderings
      of a particular graph.
