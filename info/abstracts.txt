Introduction

The best way to learn design is to study examples, and some of the best examples
of software design come from the tools programmers use in their own work. In
these lessons we build small versions of things like file backup systems,
testing frameworks, regular expression matchers, and browser layout engines both
to demystify them and to give some insights into how experienced programmers
think. readers should be able to write JavaScript programs using loops, arrays,
functions, and classes, install Node on their computer and run programs with it
from the command line, and explain what a tree is and how to process one
recursively. (This is the most complicated data structure and algorithm we
*don't* explain.) This book can be read on its own or used as a classroom
resource. If you are looking for a project to do in a software design course,
adding a tool to those covered here would be fun as well as educational.

--------------------

Systems Programming

The biggest difference between JavaScript and most other programming languages
is that many operations in JavaScript are asynchronous.  Its designers didn't
want browsers to freeze while waiting for data to arrive or for users to click
on things, so operations that might be slow are implemented by describing now
what to do later.  And since anything that touches the hard drive is slow from a
processor's point of view, implements filesystem operations the same way.  We
need to understand how these work in order to debug things when they go wrong,
and also need to understand how to manipulate files and directory
programmatically, so this chapter explores how to do the latter using the
former.

--------------------

Asynchronous Programming

Callbacks work, but they are hard to read and debug, which means they only
"work" in a limited sense.  JavaScript's developers therefore added another
mechanism called promises to the language in 2015 to make callbacks easier to
write and understand, and more recently they added the keywords async and await
as well to make asynchronous programming easier still.  To show how these work,
we will create a class of our own that provides the same core features as
promises. Along the way, we'll take a closer look at how JavaScript schedules
tasks, and at how a class can encapsulate and encourage particular sequences of
operations.

--------------------

Unit Testing

If software is going to be used in the real world, its developers have an
obligation to make sure it works, and that means testing it. A tool for writing
and running unit tests is a good first step; such a tool should find files
containing tests, find the tests in those files, run the tests, capture their
results, and report each test's result and a summary of those results. Building
a framework to do this gives us a chance to explore how one module can load
others dynamically and use introspection to find out what they contain rather
than knowing in advance.

--------------------

File Backup

A version control system like Git keeps track of changes to files so that we can
recover old versions if we want to.  Its heart is a way to archive files that
records which versions of which files existed at the same time (so that we can
go back to a consistent previous state), and stores any particular version of a
file only once, so that we don't waste disk space.  In this chapter we build a
tool for doing both tasks.  It doesn't do everything Git does---in particular,
it won't let us create and merge branches---but it shows how we can use hashing,
which is one of the most powerful and versatile ideas in programming.

--------------------

Data Tables

Modern software systems are so complex that it's practically impossible to
predict their performance in advance. Instead, developers need to conduct some
experiments to find out what's fast or slow in practice. To see how to do this
systematically, this chapter looks at several ways to implement data tables with
one or more named columns and zero or more rows.  Tables like appear over and
over again in programming, from spreadsheets and databases to the dataframes of
R and Python.  The key operations on data tables are those provided by SQL:
filter, select, summarize, and join.  These can be implemented in about five
hundred lines of code, but their performance varies dramatically depending on
how the data is stored.

--------------------

Pattern Matching

Pattern matching is ubiquitous, from the familiar "*.txt" for selecting text
files to CSS selectors and regular expressions of potentially bewildering
complexity. This chapter explores how matching works by building a simple
version of the CSS selectors used in HTML and JavaScript, then moves on to
regular expressions. Along the way, we will see how to design software
components that can be combined in a limitless number of ways, and which manage
each other's execution so that their users can ignore implementation details.
Our final implementation relies on several design patterns that can be applied
in many other situations.

--------------------

Parsing Expressions

The previous chapter showed how to implement regular expressions by chaining
objects together. This approach works, but requires users to do a lot of
typing. In contrast, the regular expressions provided in all modern languages
can be written in just a few characters. The key is to create a parser that
translates those terse representations into objects. To do this, we must break
the text into atomic units called tokens, then figure out how to combine those
tokens while respecting the precedence and scope of various operators. The
parsers for complex data formats and programs are much more complicated than the
one we write, but the fundamentals ideas are the same.

--------------------

Page Templates

Every program needs documentation in order to be usable, and the best place to
put that documentation is on the web.  Writing and updating pages by hand is
time-consuming and error-prone, particularly when many parts are the same, so
most documentation sites use some kind of static site generator to create web
pages from templates.  At the heart of every static site generator is a page
templating system.  This chapter therefore builds a simple templating system
that parses HTML pages and walks the resulting tree to find nodes with special
attributes.  The tool then executes the instructions in those nodes to do the
equivalent of loops and if/else statements.

--------------------

Build Manager

Choosing what actions to take based on how tasks or files depend on one another,
while only executing tasks once and in the right order, crops up in software
systems from business workflows to rebuilding an operating system or
re-deploying a website.  A build manager takes a description of what depends on
what, figures out which files are out of date, determines an order in which to
rebuild things, and then executes any necessary steps.  This chapter creates a
simple build manager as a way of exploring design patterns in defining,
selecting, and executing rules that include pattern matching and user-defined
tasks.

--------------------

Layout Engine

A layout engine takes some text and images, and some layout instructions, and
decides where to put each character or pixel.  These engines are at the core of
browsers and e-book readers (which are basically the same thing) as well as the
page design tools used in professional publishing, and they are surprisingly
tricky to get right: most elements can be resized to fit the available space,
but each time one is made taller or wider, it changes the space available for
other elements. As well as looking at algorithms for managing layout, this
chapter looks at how to test systems of this kind.

--------------------

File Interpolator

A file interpolator is a tool that inserts bits of text extracted from one set
of files into the right places in another set of files. Page templating systems
rely on them, and so do the compilers for older languages like C and C++. The
interpolator built in this chapter introduces the idea of dynamically evaluating
code, i.e., loading the text of a program and running it directly instead of
relying on the language's runtime to execute it. Dynamic evaluation is a very
powerful tool, but can also introduce the kinds of security vulnerabilities that
keep programmers up at night; understanding how it works is key to safeguarding
against these problems.

--------------------

Module Loader

The previous chapter showed how to evaluate source code directly. This chapter
builds on that by constructing a module loader: a tool that allows one source
file to load and use the code in another.  The key requirement for such a tool
is to avoid accidentally overwriting things: if it evaluates some code and that
assigns to a variable named X, anything called X already in our program might be
overwritten.  The tool therefore needs to encapsulate the contents of what it
loads, which in turn requires it to manage the text of the program being loaded
in very careful ways.

--------------------

Style Checker

Programmers argue endlessly about the best way to format their programs, but
everyone agrees that the most important thing is to be consistent.  Since
checking rules by hand is tedious, most programmers use tools to compare code
against various rules and report any violations.  Programs that do this are
often called linters (because they look for fluff in source code).  This chapter
builds a simple linter inspired by the ones used to check the code written for
this book.  This linter parses source code to create a data structure, then goes
through that data structure and apply rules for each part of the program,
illustrating yet again that programs are just another kind of data.

--------------------

Code Generator

How much code does a set of tests actually test?  One way to find out is to use
a code coverage tool that watches a program while it executes and keeps track of
which lines have run and which haven't.  Making sure that each line is tested at
least once doesn't guarantee that the code is bug-free, but any code that isn't
run shouldn't be trusted.  Rather than rewriting JavaScript to keep track of
this information, this chapter builds a tool to modify the functions themselves
by parsing the code, inserting the extra instructions that coverage requires
into the resulting tree, and then turning that tree back into code.

--------------------

Documentation Generator

Many programmers believe they're more likely to write documentation and keep it
up to date if it is embedded in the code. Tools that extract specially
formatted comments from source files and turn them into documentation have been
around since the 1980s if not earlier; the details vary widely, but they all
parse program files to find interesting content while keeping track of what
module, class, function, or variable the content was associated with. After
collating this content, the documentation generator converts it to HTML or some
other format for display, inserting cross-references to (for example) connect
classes to their parents and variables to the definitions of their types.

--------------------

Module Bundler

A module bundler finds all the files that an application depends on and combines
them into a single loadable file. Such a file is much more efficient to load:
while it's the same number of bytes, it's just one network request. Bundling
files also tests that dependencies actually resolve so that the application has
at least a chance of being able to run. Bundling requires an entry point, i.e.,
a place to start searching for dependencies. Given that, it finds the
transitive closure of all the dependencies, combines them into one file, and
ensures they can find each other correctly once loaded. The latter requirements
turns out to be the hardest, since we need to ensure that the names defined in
one module don't collide with those defined in another.

--------------------

Package Manager

Most languages have an online archive from which developers can
download packages. Each package typically has a name and one or more
versions; each version may have a list of dependencies, and the
package may specify a version or range of versions for each
dependency. However, some of those versions may conflict with the
requirements of other things that need to be installed, so a package
manager must have some way to find a mutually consistent set of
versions (or report that none exists). Doing this involves searching a
multidimensional space as efficiently as possible to find regions
where version requirements intersect.

--------------------

Virtual Machine

Computers don't execute JavaScript directly. Instead, every processor
has its own instruction set; compilers translate high-level languages
into those instructions. To learn more about how this works, this
chapter constructs a simulation of a tiny processor with a few bytes
of memory and a handful of instructions. As small as it is, this
virtual machine can perform complex calculations comprised of loops
and conditionals. While the virtual machines that full-strength
languages such as JavaScript and Python rely on are much larger and
more sophisticated, they operate on the same principles; understanding
those principles can help with debugging and performance optimization.

--------------------

Debugger

Debuggers are as much a part of good programmers' lives as version
control but are taught far less often. This chapter shows how to
build an interactive single-stepping debugger for the simple virtual
machine developed in the prevous chapter; in doing so, it also shows
how to test interactive applications. One of the keys is to record
where each instruction came from, so that we can show users the
correct source code. Another is to modify the virtual machine to check
a callback function to see when it's supposed to stop, which is
another example of designing for testability.

--------------------

Conclusion

Marshall McLuhan once wrote, "We shape our tools, and thereafter our tools shape
us." We hope that your exploration of software design won't stop here, but that
you will instead continue to read, to learn, to teach, and to share. If you
would like to add a chapter to this book or translate it into another
programming language, human language, or both, your help would be very welcome:
please see the introduction and the contributors' guide for more information.
